cmake_minimum_required(VERSION 3.10.2 FATAL_ERROR)
project(IlluminationEngine)
set(OpenGL_GL_PREFERENCE LEGACY)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
set(ILLUMINATION_ENGINE_PREFER_PRE_INSTALLED false)
if (NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif ()
add_compile_options("-Wall")
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    add_compile_options("-Wextra")
    if (CMAKE_BUILD_TYPE STREQUAL Release)
        add_compile_options("-O3")
    else ()
        add_compile_options("-g")
    endif ()
endif ()
# Note: All install instructions are for Ubuntu Linux
find_package(OpenGL REQUIRED) # install with "sudo apt install libglu1-mesa-dev mesa-common-dev libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev"
find_package(Vulkan) # install with "wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -;sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.2.189-focal.list https://packages.lunarg.com/vulkan/1.2.189/lunarg-vulkan-1.2.189-focal.list;sudo apt update;sudo apt install vulkan-sdk"
if (ILLUMINATION_ENGINE_PREFER_PRE_INSTALLED)
    find_package(GLEW) # install with "sudo apt install libglew-dev"
    find_package(glfw3) # install with "sudo apt install libglfw3-dev"
    find_package(glm) # install with "sudo apt install libglm-dev"
endif ()
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_SAMPLES OFF CACHE BOOL "" FORCE)
set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
if (((NOT EXISTS ${CMAKE_SOURCE_DIR}/deps) OR ${CMAKE_SOURCE_DIR}/deps.tar.xz IS_NEWER_THAN ${CMAKE_SOURCE_DIR}/deps) AND CMAKE_BUILD_TYPE STREQUAL Debug)
    if (EXISTS ${CMAKE_SOURCE_DIR}/deps)
        file(RENAME ${CMAKE_SOURCE_DIR}/deps ${CMAKE_SOURCE_DIR}/dep)
    endif()
    file(REMOVE_RECURSE ${CMAKE_SOURCE_DIR}/dep)
    message("Unpacking dependencies tarball...")
    file(ARCHIVE_EXTRACT INPUT ${CMAKE_SOURCE_DIR}/deps.tar.xz DESTINATION ${CMAKE_SOURCE_DIR}/dep)
    file(RENAME ${CMAKE_SOURCE_DIR}/dep/deps ${CMAKE_SOURCE_DIR}/deps)
    file(REMOVE_RECURSE ${CMAKE_SOURCE_DIR}/dep)
    file(TOUCH_NOCREATE ${CMAKE_SOURCE_DIR}/deps)
elseif(CMAKE_BUILD_TYPE STREQUAL Release)
    while(NOT EXISTS ${CMAKE_SOURCE_DIR}/deps)
    endwhile()
    message("Found unpacked dependencies")
endif ()
file(COPY ${CMAKE_SOURCE_DIR}/res DESTINATION ${CMAKE_BINARY_DIR}/bin)
file(GLOB_RECURSE vulkan_shaders_to_compile res/Shaders/Vulkan*/*)
file(GLOB_RECURSE opengl_shaders_to_compile res/Shaders/OpenGL*/*)
add_executable(IlluminationEngine src/main.cpp ${vulkan_shaders_to_compile} ${opengl_shaders_to_compile})
target_include_directories(IlluminationEngine PRIVATE ${CMAKE_SOURCE_DIR}/src)
set_target_properties(IlluminationEngine PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set_target_properties(IlluminationEngine PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
add_subdirectory(${CMAKE_SOURCE_DIR}/deps/assimp)
target_include_directories(IlluminationEngine PRIVATE ${CMAKE_SOURCE_DIR}/deps/assimp/include)
target_include_directories(IlluminationEngine PRIVATE ${CMAKE_SOURCE_DIR}/deps/assimp/contrib/stb_image)
target_link_libraries(IlluminationEngine PUBLIC assimp ${Assimp_LIBRARIES})
if (NOT CMAKE_BUILD_TYPE STREQUAL Debug)
    add_compile_definitions(LOG4CPLUS_DISABLE_DEBUG)
endif ()
if ((NOT glm_FOUND) AND EXISTS ${CMAKE_SOURCE_DIR}/deps/glm)
    add_subdirectory(${CMAKE_SOURCE_DIR}/deps/glm)
    target_include_directories(IlluminationEngine PRIVATE ${CMAKE_SOURCE_DIR}/deps)
    message("Building with packaged glm")
else ()
    message("Building with pre-installed glm")
endif ()
target_link_libraries(IlluminationEngine PUBLIC glm ${glm_LIBRARIES})
if ((NOT glfw3_FOUND) AND EXISTS ${CMAKE_SOURCE_DIR}/deps/glfw)
    add_subdirectory(${CMAKE_SOURCE_DIR}/deps/glfw)
    target_include_directories(IlluminationEngine PRIVATE ${CMAKE_SOURCE_DIR}/deps/glfw/include)
    message("Building with packaged glfw")
else ()
    message("Building with pre-installed glfw")
endif ()
target_link_libraries(IlluminationEngine PUBLIC glfw ${GLFW_LIBRARIES})
if ((NOT GLEW_FOUND) AND EXISTS ${CMAKE_SOURCE_DIR}/deps/glew)
    add_subdirectory(${CMAKE_SOURCE_DIR}/deps/glew/build/cmake)
    target_include_directories(IlluminationEngine PRIVATE ${CMAKE_SOURCE_DIR}/deps/glew/include)
    target_link_libraries(IlluminationEngine PUBLIC glew ${glew_LIBRARIES})
    message("Building with packaged glew")
else ()
    target_link_libraries(IlluminationEngine PUBLIC GLEW ${glew_LIBRARIES})
    message("Building with pre-installed glew")
endif ()
if (Vulkan_FOUND)
    add_subdirectory(${CMAKE_SOURCE_DIR}/deps/vk-bootstrap)
    target_include_directories(IlluminationEngine PRIVATE ${CMAKE_SOURCE_DIR}/deps)
    target_link_libraries(IlluminationEngine PUBLIC vk-bootstrap ${VK_BOOTSTRAP_LIBRARIES} Vulkan::Vulkan)
    add_compile_definitions(ILLUMINATION_ENGINE_VULKAN)
    find_program(GLSLC glslc REQUIRED)
    foreach (shader ${vulkan_shaders_to_compile})
        get_filename_component(shader_extension ${shader} LAST_EXT)
        if (NOT shader_extension MATCHES ".spv")
            get_filename_component(shader_directory ${shader} DIRECTORY)
            get_filename_component(shader_filename ${shader} NAME)
            set(shader_path "${shader_directory}/${shader_filename}")
            #**@todo: Make this check the shader code to determine Vulkan 1.2 requirements.
            #**@todo: Find a way to pre-compile OpenGL shaders.
            string(FIND "${shader}" "VulkanRayTracingShaders" requires_vulkan_1.2)
            if (requires_vulkan_1.2)
                add_custom_command(OUTPUT "${shader}.spv" COMMAND ${GLSLC} --target-env=vulkan1.2 ${shader_path} -o "${shader}.spv" DEPENDS ${shader} COMMENT "Compiling ${shader_path}")
            else ()
                add_custom_command(OUTPUT "${shader}.spv" COMMAND ${GLSLC} ${shader_path} -o "${shader}.spv" DEPENDS ${shader} COMMENT "Compiling ${shader_path}")
            endif ()
            target_sources(IlluminationEngine PUBLIC "${shader}.spv")
        endif ()
    endforeach ()
endif ()
target_link_libraries(IlluminationEngine PUBLIC OpenGL::GL)
add_compile_definitions(ILLUMINATION_ENGINE_OPENGL)