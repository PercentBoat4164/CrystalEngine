function (addAssImp target)
    set(ASSIMP_BUILD_ASSIMP_TOOLS OFF CACHE BOOL "" FORCE)
    set(ASSIMP_BUILD_SAMPLES OFF CACHE BOOL "" FORCE)
    set(ASSIMP_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    set(ASSIMP_BUILD_ZLIB ON CACHE BOOL "" FORCE)
    if (NOT EXISTS ${CMAKE_BINARY_DIR}/AssImpFOUND)
        add_subdirectory(${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/assimp ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/assimp)
        file(TOUCH ${CMAKE_BINARY_DIR}/AssImpFOUND)
    endif ()
    target_include_directories(${target} PUBLIC ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/assimp/contrib/stb ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/assimp/include ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/assimp/include)
    target_link_libraries(${target} PUBLIC assimp)
    add_dependencies(${target} assimp)
endfunction ()

function (addGLM target)
    if (NOT EXISTS ${CMAKE_BINARY_DIR}/GLMFOUND)
        add_subdirectory(${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/glm ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/glm)
        file(TOUCH ${CMAKE_BINARY_DIR}/GLMFOUND)
    endif ()
    target_include_directories(${target} PUBLIC ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/glm)
    target_link_libraries(${target} PUBLIC glm)
    add_dependencies(${target} glm)
endfunction ()

function (addGLFW target)
    set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
    if (NOT EXISTS ${CMAKE_BINARY_DIR}/GLFWFOUND)
        add_subdirectory(${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/glfw ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/glfw)
        file(TOUCH ${CMAKE_BINARY_DIR}/GLFWFOUND)
    endif ()
    target_include_directories(${target} PUBLIC ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/glfw/include)
    target_link_libraries(${target} PUBLIC glfw)
    add_dependencies(${target} glfw ${GLFW_LIBRARIES})
endfunction ()

function (addVulkan target)
    find_package(Vulkan)
    if (Vulkan_FOUND)
        if (NOT EXISTS ${CMAKE_BINARY_DIR}/VulkanFOUND)
            add_subdirectory(${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/vk-bootstrap ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/vk-boostrap)
            file(TOUCH ${CMAKE_BINARY_DIR}/VulkanFOUND)
        endif ()
        target_include_directories(${target} PUBLIC ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/vk-bootstrap/src)
        target_link_libraries(${target} PUBLIC vk-bootstrap Vulkan::Vulkan)
        add_dependencies(${target} vk-bootstrap Vulkan::Vulkan)
        add_compile_definitions(ILLUMINATION_ENGINE_VULKAN)
    endif ()
endfunction ()

function (addGLEW target)
    set(OpenGL_GL_PREFERENCE LEGACY)
    find_package(OpenGL REQUIRED)
    target_link_libraries(${target} PUBLIC OpenGL::GL)
    file(TOUCH ${CMAKE_BINARY_DIR}/OpenGLFOUND)
    if (NOT EXISTS ${CMAKE_BINARY_DIR}/GLEWFOUND)
        add_subdirectory(${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/glew/build/cmake ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/glew)
        file(TOUCH ${CMAKE_BINARY_DIR}/GLEWFOUND)
    endif ()
    target_include_directories(${target} PUBLIC ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/glew/include)
    target_link_libraries(${target} PUBLIC glew)
    add_dependencies(${target} glew)
    add_compile_definitions(ILLUMINATION_ENGINE_OPENGL)
endfunction ()

function (addSpdlog target)
    if (NOT EXISTS ${CMAKE_BINARY_DIR}/Log4cplusFOUND)
        add_subdirectory(${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/spdlog ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/spdlog)
        file(TOUCH ${CMAKE_BINARY_DIR}/Log4cplusFOUND)
    endif ()
    target_include_directories(${target} PUBLIC ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps/spdlog)
    target_link_libraries(${target} PUBLIC spdlog)
    add_dependencies(${target} spdlog)
    add_compile_definitions(ILLUMINATION_ENGINE_LOG)
    if (NOT CMAKE_BUILD_TYPE STREQUAL Debug)
        add_compile_definitions(LOG4CPLUS_DISABLE_DEBUG)
    endif ()
endfunction ()

cmake_minimum_required(VERSION 3.10.2 FATAL_ERROR)
project(IlluminationEngine)

set(ILLUMINATION_ENGINE_BASE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
set(CMAKE_CXX_LINKER_PREFERENCE)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
if (((NOT EXISTS ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps) OR ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps.tar.xz IS_NEWER_THAN ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps) AND CMAKE_BUILD_TYPE STREQUAL Debug)
    if (EXISTS ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps)
        file(RENAME ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/dep)
    endif ()
    file(REMOVE_RECURSE ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/dep)
    message("Unpacking dependencies tarball...")
    file(ARCHIVE_EXTRACT INPUT ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps.tar.xz DESTINATION ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/dep)
    file(RENAME ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/dep/deps ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps)
    file(REMOVE_RECURSE ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/dep)
    file(TOUCH_NOCREATE ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps)
elseif (CMAKE_BUILD_TYPE STREQUAL Release)
    while (NOT EXISTS ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/deps)
    endwhile ()
    message("Found unpacked dependencies")
endif ()
file(COPY ${ILLUMINATION_ENGINE_BASE_DIRECTORY}/res DESTINATION ${CMAKE_BINARY_DIR}/bin)
if (UNIX)
    set(BUILD_SHARED_LIBS ON CACHE BOOL "" FORCE)
else ()
    set(BUILD_SHARED_LIBS OFF CACHE BOOL "" FORCE)
endif ()

if (CMAKE_BUILD_TYPE STREQUAL Debug)
    add_compile_options("-g")
else ()
    add_compile_options("-O3")
endif ()

add_subdirectory(src)