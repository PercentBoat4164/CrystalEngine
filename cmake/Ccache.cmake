option(USE_CCACHE "" OFF)
option(CCACHE_VERSION "" 4.8.1)

set(OLD_CPM_USE_LOCAL_PACKAGES ${CPM_USE_LOCAL_PACKAGES})
set(CPM_USE_LOCAL_PACKAGES OFF)

if (DEFINED USE_CCACHE)
    if (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
        if (CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "AMD64")
            set(URL "https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}-windows-x86_64.zip")
        else ()
            set(URL "https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}-windows-i686.zip")
        endif ()
    elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
        set(URL "https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}-linux-x86_64.tar.xz")
    elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
        set(URL "https://github.com/ccache/ccache/releases/download/v${CCACHE_VERSION}/ccache-${CCACHE_VERSION}-darwin.tar.xz")
    endif ()
    CPMAddPackage(NAME "Ccache" URL "${URL}" VERSION ${CCACHE_VERSION})
    find_program(CCACHE_PROGRAM "ccache" PATHS ${CPM_PACKAGE_Ccache_SOURCE_DIR})
    if (NOT CCACHE_PROGRAM STREQUAL "CCACHE_PROGRAM-NOTFOUND")
        message(STATUS "Using Ccache v${CPM_PACKAGE_ccache_VERSION}: ${CCACHE_PROGRAM}")
        set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_PROGRAM} CACHE STRING "" FORCE)
        set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_PROGRAM} CACHE STRING "" FORCE)
    else ()
        message(WARNING "Ccache could not be found in ${CPM_PACKAGE_Ccache_SOURCE_DIR}.")
    endif ()
endif ()

set(CPM_USE_LOCAL_PACKAGES ${OLD_CPM_USE_LOCAL_PACKAGES})